name: Maestro E2E Tests

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'src/**'
      - 'maestro/**'
      - 'package.json'
      - 'app.json'

jobs:
  e2e-tests:
    name: Maestro E2E Tests
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Setup Expo
        uses: expo/expo-github-action@v8
        with:
          expo-version: latest

      - name: Prebuild iOS
        run: |
          npx expo prebuild
          npm run ios

      - name: Run Maestro Tests
        run: |
          curl -Ls "https://get.maestro.mobile.dev" | bash
          export PATH="$PATH":"$HOME/.maestro/bin"
          maestro --version
          maestro test \
            --format=junit \
            --output=test-reports/report.xml \
            --video-recording=on \
            maestro/flows

      # Upload both test results AND media artifacts
      - name: Upload Test Artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-artifacts
          path: |
            test-reports/
            .maestro/videos/
            .maestro/screenshots/

      - name: Post Test Results to PR
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: E2E Test Results
          path: test-reports/report.xml
          reporter: jest-junit
          fail-on-error: true

      # Add media files to PR comment
      - name: Comment PR with Test Media
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Function to get all files from directory
            const getFiles = (dir) => {
              const files = fs.readdirSync(dir);
              return files.map(file => path.join(dir, file));
            };

            try {
              const screenshots = getFiles('.maestro/screenshots');
              const videos = getFiles('.maestro/videos');
              
              let comment = '### Test Run Media\n\n';
              
              if (screenshots.length > 0) {
                comment += '#### Screenshots:\n';
                screenshots.forEach(screenshot => {
                  comment += `![Screenshot](${screenshot})\n`;
                });
              }
              
              if (videos.length > 0) {
                comment += '#### Test Recordings:\n';
                videos.forEach(video => {
                  comment += `[Download Test Recording](${video})\n`;
                });
              }
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.name,
                body: comment
              });
            } catch (error) {
              console.log('Error creating media comment:', error);
            }
